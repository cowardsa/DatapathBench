module {
  hw.module @dot_prod_two(in %a : i8, in %b : i8, in %c : i8, in %d : i8, out res : i16) {
    %c0_i9 = hw.constant 0 : i9
    %c0_i10 = hw.constant 0 : i10
    %c0_i11 = hw.constant 0 : i11
    %c0_i12 = hw.constant 0 : i12
    %c0_i13 = hw.constant 0 : i13
    %c0_i14 = hw.constant 0 : i14
    %c0_i15 = hw.constant 0 : i15
    %c0_i7 = hw.constant 0 : i7
    %c0_i6 = hw.constant 0 : i6
    %c0_i5 = hw.constant 0 : i5
    %c0_i4 = hw.constant 0 : i4
    %c0_i3 = hw.constant 0 : i3
    %c0_i2 = hw.constant 0 : i2
    %false = hw.constant false
    %c0_i16 = hw.constant 0 : i16
    %c0_i8 = hw.constant 0 : i8
    %0 = comb.concat %c0_i8, %b : i8, i8
    %1 = comb.extract %a from 0 : (i8) -> i1
    %2 = comb.extract %a from 1 : (i8) -> i1
    %3 = comb.extract %a from 2 : (i8) -> i1
    %4 = comb.extract %a from 3 : (i8) -> i1
    %5 = comb.extract %a from 4 : (i8) -> i1
    %6 = comb.extract %a from 5 : (i8) -> i1
    %7 = comb.extract %a from 6 : (i8) -> i1
    %8 = comb.extract %a from 7 : (i8) -> i1
    %9 = comb.mux %1, %0, %c0_i16 : i16
    %10 = comb.concat %c0_i7, %b : i7, i8
    %11 = comb.mux %2, %10, %c0_i15 : i15
    %12 = comb.concat %11, %false : i15, i1
    %13 = comb.concat %c0_i6, %b : i6, i8
    %14 = comb.mux %3, %13, %c0_i14 : i14
    %15 = comb.concat %14, %c0_i2 : i14, i2
    %16 = comb.concat %c0_i5, %b : i5, i8
    %17 = comb.mux %4, %16, %c0_i13 : i13
    %18 = comb.concat %17, %c0_i3 : i13, i3
    %19 = comb.concat %c0_i4, %b : i4, i8
    %20 = comb.mux %5, %19, %c0_i12 : i12
    %21 = comb.concat %20, %c0_i4 : i12, i4
    %22 = comb.concat %c0_i3, %b : i3, i8
    %23 = comb.mux %6, %22, %c0_i11 : i11
    %24 = comb.concat %23, %c0_i5 : i11, i5
    %25 = comb.concat %c0_i2, %b : i2, i8
    %26 = comb.mux %7, %25, %c0_i10 : i10
    %27 = comb.concat %26, %c0_i6 : i10, i6
    %28 = comb.concat %false, %b : i1, i8
    %29 = comb.mux %8, %28, %c0_i9 : i9
    %30 = comb.concat %29, %c0_i7 : i9, i7
    %31 = comb.concat %c0_i8, %d : i8, i8
    %32 = comb.extract %c from 0 : (i8) -> i1
    %33 = comb.extract %c from 1 : (i8) -> i1
    %34 = comb.extract %c from 2 : (i8) -> i1
    %35 = comb.extract %c from 3 : (i8) -> i1
    %36 = comb.extract %c from 4 : (i8) -> i1
    %37 = comb.extract %c from 5 : (i8) -> i1
    %38 = comb.extract %c from 6 : (i8) -> i1
    %39 = comb.extract %c from 7 : (i8) -> i1
    %40 = comb.mux %32, %31, %c0_i16 : i16
    %41 = comb.concat %c0_i7, %d : i7, i8
    %42 = comb.mux %33, %41, %c0_i15 : i15
    %43 = comb.concat %42, %false : i15, i1
    %44 = comb.concat %c0_i6, %d : i6, i8
    %45 = comb.mux %34, %44, %c0_i14 : i14
    %46 = comb.concat %45, %c0_i2 : i14, i2
    %47 = comb.concat %c0_i5, %d : i5, i8
    %48 = comb.mux %35, %47, %c0_i13 : i13
    %49 = comb.concat %48, %c0_i3 : i13, i3
    %50 = comb.concat %c0_i4, %d : i4, i8
    %51 = comb.mux %36, %50, %c0_i12 : i12
    %52 = comb.concat %51, %c0_i4 : i12, i4
    %53 = comb.concat %c0_i3, %d : i3, i8
    %54 = comb.mux %37, %53, %c0_i11 : i11
    %55 = comb.concat %54, %c0_i5 : i11, i5
    %56 = comb.concat %c0_i2, %d : i2, i8
    %57 = comb.mux %38, %56, %c0_i10 : i10
    %58 = comb.concat %57, %c0_i6 : i10, i6
    %59 = comb.concat %false, %d : i1, i8
    %60 = comb.mux %39, %59, %c0_i9 : i9
    %61 = comb.concat %60, %c0_i7 : i9, i7
    %62:2 = datapath.compress %9, %12, %15, %18, %21, %24, %27, %30, %40, %43, %46, %49, %52, %55, %58, %61 : 16 x i16 -> (i16, i16)
    %63 = comb.add bin %62#0, %62#1 : i16
    hw.output %63 : i16
  }
}

